{"ast":null,"code":"var _jsxFileName = \"/Users/collins/Desktop/MediCasa/frontend/src/componets/PropertyMap.js\";\nimport mapboxgl from 'mapbox-gl';\nimport React, { Component } from 'react';\nmapboxgl.accessToken = 'pk.eyJ1IjoiYzBsbGluc2RldiIsImEiOiJjazVmYmE0dHEyZ2IyM2RvZXB6YXE4OXV5In0.vDo9Yr5htncb-iuBRpZEeA'; // import \"../css/App.css\";\n\nexport default class PropertyMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: props.long,\n      lat: props.lati,\n      zoom: 15\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    const size = 200;\n    var pulsingDot = {\n      width: size,\n      height: size,\n      data: new Uint8Array(size * size * 4),\n      // get rendering context for the map canvas when layer is added to the map\n      onAdd: function () {\n        var canvas = document.createElement('canvas');\n        canvas.width = this.width;\n        canvas.height = this.height;\n        this.context = canvas.getContext('2d');\n      },\n      // called once before every frame where the icon will be used\n      render: function () {\n        var duration = 1000;\n        var t = performance.now() % duration / duration;\n        var radius = size / 2 * 0.3;\n        var outerRadius = size / 2 * 0.7 * t + radius;\n        var context = this.context; // draw outer circle\n\n        context.clearRect(0, 0, this.width, this.height);\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, outerRadius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n        context.fill(); // draw inner circle\n\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 100, 100, 1)';\n        context.strokeStyle = 'white';\n        context.lineWidth = 2 + 4 * (1 - t);\n        context.fill();\n        context.stroke(); // update this image's data with data from the canvas\n\n        this.data = context.getImageData(0, 0, this.width, this.height).data; // continuously repaint the map, resulting in the smooth animation of the dot\n\n        map.triggerRepaint(); // return `true` to let the map know that the image was updated\n\n        return true;\n      }\n    };\n    map.on('move', () => {\n      map.addImage('pulsing-dot', pulsingDot, {\n        pixelRatio: 2\n      });\n      map.addLayer({\n        'id': 'points',\n        'type': 'symbol',\n        'source': {\n          'type': 'geojson',\n          'data': {\n            'type': 'FeatureCollection',\n            'features': [{\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [this.state.lng, this.state.lat]\n              }\n            }]\n          }\n        },\n        'layout': {\n          'icon-image': 'pulsing-dot'\n        }\n      });\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      class: \"map-dv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Localizacao\"), React.createElement(\"div\", {\n      className: \"fullwidth-home-map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/collins/Desktop/MediCasa/frontend/src/componets/PropertyMap.js"],"names":["mapboxgl","React","Component","accessToken","PropertyMap","constructor","props","state","lng","long","lat","lati","zoom","componentDidMount","map","Map","container","mapContainer","style","center","size","pulsingDot","width","height","data","Uint8Array","onAdd","canvas","document","createElement","context","getContext","render","duration","t","performance","now","radius","outerRadius","clearRect","beginPath","arc","Math","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","getImageData","triggerRepaint","on","addImage","pixelRatio","addLayer","setState","getCenter","toFixed","getZoom","el"],"mappings":"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","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport React, { Component } from 'react';\nmapboxgl.accessToken = 'pk.eyJ1IjoiYzBsbGluc2RldiIsImEiOiJjazVmYmE0dHEyZ2IyM2RvZXB6YXE4OXV5In0.vDo9Yr5htncb-iuBRpZEeA';\n\n// import \"../css/App.css\";\n\nexport default class PropertyMap extends Component  {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: props.long,\n      lat: props.lati,\n      zoom: 15\n    };\n    }\n     \n    componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    const size = 200;\n    var pulsingDot = {\n      width: size,\n      height: size,\n      data: new Uint8Array(size * size * 4),\n       \n      // get rendering context for the map canvas when layer is added to the map\n      onAdd: function() {\n      var canvas = document.createElement('canvas');\n      canvas.width = this.width;\n      canvas.height = this.height;\n      this.context = canvas.getContext('2d');\n      },\n       \n      // called once before every frame where the icon will be used\n      render: function() {\n      var duration = 1000;\n      var t = (performance.now() % duration) / duration;\n       \n      var radius = (size / 2) * 0.3;\n      var outerRadius = (size / 2) * 0.7 * t + radius;\n      var context = this.context;\n       \n      // draw outer circle\n      context.clearRect(0, 0, this.width, this.height);\n      context.beginPath();\n      context.arc(\n      this.width / 2,\n      this.height / 2,\n      outerRadius,\n      0,\n      Math.PI * 2\n      );\n      context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n      context.fill();\n       \n      // draw inner circle\n      context.beginPath();\n      context.arc(\n      this.width / 2,\n      this.height / 2,\n      radius,\n      0,\n      Math.PI * 2\n      );\n      context.fillStyle = 'rgba(255, 100, 100, 1)';\n      context.strokeStyle = 'white';\n      context.lineWidth = 2 + 4 * (1 - t);\n      context.fill();\n      context.stroke();\n       \n      // update this image's data with data from the canvas\n      this.data = context.getImageData(\n      0,\n      0,\n      this.width,\n      this.height\n      ).data;\n       \n      // continuously repaint the map, resulting in the smooth animation of the dot\n      map.triggerRepaint();\n       \n      // return `true` to let the map know that the image was updated\n      return true;\n      }\n      };\n    map.on('move', () => {\n      map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\n      map.addLayer({\n        'id': 'points',\n        'type': 'symbol',\n        'source': {\n        'type': 'geojson',\n        'data': {\n        'type': 'FeatureCollection',\n        'features': [\n        {\n        'type': 'Feature',\n        'geometry': {\n        'type': 'Point',\n        'coordinates': [this.state.lng, this.state.lat]\n        }\n        }\n        ]\n        }\n        },\n        'layout': {\n        'icon-image': 'pulsing-dot'\n        }\n        });\n      this.setState({\n      lng: map.getCenter().lng.toFixed(4),\n      lat: map.getCenter().lat.toFixed(4),\n      zoom: map.getZoom().toFixed(2)\n      });\n    });\n    }\n     \n render(){\n  return (\n    <div class=\"map-dv\">\n      <h3>Localizacao</h3>\n      <div className=\"fullwidth-home-map\">\n      {/* <div className='sidebarStyle'>\n<div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\n</div> */}\n<div ref={el => this.mapContainer = el} className='mapContainer' />\n      </div>\n  \n    </div>\n  );\n }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}